<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Raven.Imports.SignalR.Hosting.Self</name>
    </assembly>
    <members>
        <member name="M:Raven.Imports.SignalR.TaskAsyncHelper.Interleave``1(System.Func{``0,System.Action,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},``0,System.Threading.Tasks.TaskCompletionSource{System.Object})">
            <summary>
            Passes a task returning function into another task returning function so that
            it can decide when it starts and returns a task that completes when all are finished
            </summary>
        </member>
        <member name="M:Raven.Imports.SignalR.Hosting.Self.ExternalHttpListenerServer.#ctor(System.String,System.Net.HttpListener)">
            <summary>
            Initializes new instance of <see cref="T:Raven.Imports.SignalR.Hosting.Self.ExternalHttpListenerServer"/>.
            </summary>
            <param name="url">The url to host the server on.</param>
            <param name="listener">The external listener to use </param>
        </member>
        <member name="M:Raven.Imports.SignalR.Hosting.Self.ExternalHttpListenerServer.#ctor(System.String,Raven.Imports.SignalR.IDependencyResolver,System.Net.HttpListener)">
            <summary>
            Initializes new instance of <see cref="T:Raven.Imports.SignalR.Hosting.Self.ExternalHttpListenerServer"/>.
            </summary>
            <param name="url">The url to host the server on.</param>
            <param name="resolver">The dependency resolver for the server.</param>
            <param name="listener">The external listener to use </param>
        </member>
        <member name="M:Raven.Imports.SignalR.Hosting.Self.ExternalHttpListenerServer.ProcessRequestSafe(System.Net.HttpListenerContext,System.String)">
            <summary>
            Process the request
            </summary>
        </member>
    </members>
</doc>
